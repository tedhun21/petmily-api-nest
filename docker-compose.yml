services:
  app-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development # 개발용 단계 선택
    image: petmily-api:dev
    container_name: petmily-dev-container
    ports:
      - '8080:8080'
    env_file:
      - .env.dev
    environment:
      - DB_HOST=host.docker.internal # DB_HOST 덮어쓰기
      - ELASTICSEARCH_HOST=elasticsearch
    depends_on:
      - elasticsearch

  app-prod:
    build:
      context: .
      dockerfile: Dockerfile
      target: production # 프로덕션용 단계 선택
    image: petmily-api:prod
    container_name: petmily-prod-container
    ports:
      - '8080:8080'
    env_file:
      - .env.prod
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_HOST=elasticsearch

  redis:
    image: redis:latest
    container_name: redis
    restart: always # Redis가 중지되면 자동으로 시작
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data # 컨테이너 종류 후에도 Reids 데이터 유지
    command: redis-server --appendonly yes # 데이터 영구 저장

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.4
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - 'ES_JAVA_OPTS=-Xms256m -Xmx256m' # 가비지 컬렉션 튜닝: 기본적으로 G1GC를 사용하지만 ZGC는 최신 기술로 더 낮은 지연 시간 과 빠른 메모리 정리
      - ELASTIC_USERNAME=elastic
      - ELASTIC_PASSWORD=1234
      - indices.memory.index_buffer_size=10% # 기본 30%의 메모리를 인덱싱 버퍼로 사용 => 10%
    ports:
      - '9200:9200'
      - '9300:9300'
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ulimits:
      memlock: # 메모리 락을 걸어서 swap(RAM 메모리가 부족할 때, 디스크 공간을 임시 메모리처럼 사용하는 기능)이 발생하지 않도록 방지
        soft: -1
        hard: -1
      nofile:
        soft: 65536 #  많은 파일을 열어야 하는데 리눅스에서는 nofile(파일 핸들 개수)가 4096으로 제한됨. 늘리기
        hard: 65536
    user: '1000:1000' # 이 줄을 추가해서 비루트 사용자로 설정 (루트권한으로 실행 못하게 막아놈. 루트권한으로 가능하게 해놓으면 시스템의 다른 중요한 파일이나 프로세스를 건드릴 수 있다. 비루트는 엘라스틱 서치에 대해서만 권한을 가진다. 다운로드에 권한이 필요 -> 비루트 )
    command: >
      bash -c "
        if [ ! -d /usr/share/elasticsearch/plugins/analysis-nori ]; then
          bin/elasticsearch-plugin install analysis-nori;
        fi &&
        exec bin/elasticsearch"
    deploy:
      resources:
        limits:
          memory: 1g # 컨테이너가 사용할 최대 메모리 (1GB)
        reservations:
          memory: 256m # 최소 예약 메모리 (256MB)

volumes:
  redis_data:
    driver: local
  elasticsearch-data:
    driver: local
